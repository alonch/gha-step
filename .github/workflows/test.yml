name: Test Action
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-matrix:
    runs-on: ubuntu-latest
    name: Test Matrix Functionality
    steps:
      - uses: actions/checkout@v4

      - name: Test Basic Matrix
        id: basic-test
        uses: ./
        with:
          matrix: |
            - os: [ubuntu, macos]
              arch: [amd64, arm64]
          steps: |
            - name: Generate Output
              id: generate
              run: |
                echo "platform=$MATRIX_OS-$MATRIX_ARCH" >> $STEPS_OUTPUTS
          outputs: |
            - platform: ${ STEPS_GENERATE_PLATFORM }

      - name: Validate Basic Matrix Output
        run: |
          # Sort both JSONs by all fields to ensure consistent ordering
          output_sorted=$(echo '${{ steps.basic-test.outputs.json }}' | jq -S 'sort_by(.os, .arch, .platform)')
          expected_sorted=$(echo '[{"platform":"ubuntu-amd64","os":"ubuntu","arch":"amd64"},{"platform":"ubuntu-arm64","os":"ubuntu","arch":"arm64"},{"platform":"macos-amd64","os":"macos","arch":"amd64"},{"platform":"macos-arm64","os":"macos","arch":"arm64"}]' | jq -S 'sort_by(.os, .arch, .platform)')
          
          # Compare the sorted JSONs
          if [ "$output_sorted" != "$expected_sorted" ]; then
            echo "JSON comparison failed. Showing both versions:"
            echo "Expected (sorted):"
            echo "$expected_sorted" | jq .
            echo "Got (sorted):"
            echo "$output_sorted" | jq .
            echo "Showing diff:"
            diff -u <(echo "$expected_sorted" | jq .) <(echo "$output_sorted" | jq .) || true
            exit 1
          fi

      - name: Test Step Dependencies
        id: dependency-test
        uses: ./
        with:
          matrix: |
            - env: [dev, prod]
              region: [us-east-1, us-west-2]
          steps: |
            - name: First Step
              id: first
              run: |
                echo "config=$MATRIX_ENV-config" >> $STEPS_OUTPUTS
            - name: Second Step
              id: second
              run: |
                echo "result=$MATRIX_REGION-$STEPS_FIRST_CONFIG" >> $STEPS_OUTPUTS
          outputs: |
            - config: ${ STEPS_FIRST_CONFIG }
            - result: ${ STEPS_SECOND_RESULT }

      - name: Validate Step Dependencies Output
        run: |
          # Sort both JSONs by all fields to ensure consistent ordering
          output_sorted=$(echo '${{ steps.dependency-test.outputs.json }}' | jq -S 'sort_by(.env, .region, .config, .result)')
          expected_sorted=$(echo '[{"config":"dev-config","result":"us-east-1-dev-config","env":"dev","region":"us-east-1"},{"config":"dev-config","result":"us-west-2-dev-config","env":"dev","region":"us-west-2"},{"config":"prod-config","result":"us-east-1-prod-config","env":"prod","region":"us-east-1"},{"config":"prod-config","result":"us-west-2-prod-config","env":"prod","region":"us-west-2"}]' | jq -S 'sort_by(.env, .region, .config, .result)')
          
          # Compare the sorted JSONs
          if [ "$output_sorted" != "$expected_sorted" ]; then
            echo "JSON comparison failed. Showing both versions:"
            echo "Expected (sorted):"
            echo "$expected_sorted" | jq .
            echo "Got (sorted):"
            echo "$output_sorted" | jq .
            echo "Showing diff:"
            diff -u <(echo "$expected_sorted" | jq .) <(echo "$output_sorted" | jq .) || true
            exit 1
          fi

      - name: Test Error Handling
        id: error-test
        continue-on-error: true
        uses: ./
        with:
          matrix: |
            - test: [1, 2]
          steps: |
            - name: Fail Step
              id: fail
              run: |
                if [ "$MATRIX_TEST" = "2" ]; then
                  echo "Should fail for test=2"
                  exit 1
                fi
                echo "status=ok" >> $STEPS_OUTPUTS
          outputs: |
            - status: ${ STEPS_FAIL_STATUS }

      - name: Validate Error Handling
        run: |
          if [ "${{ steps.error-test.outcome }}" != "failure" ]; then
            echo "Expected error-test to fail"
            exit 1
          fi

      - name: Start Timer
        id: start-timer
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Test Parallel Execution (Default)
        id: parallel-test
        uses: ./
        with:
          matrix: |
            - number: [1, 2, 3, 4, 5]
          steps: |
            - name: Sleep Step
              id: sleep
              run: sleep 1

      - name: Validate Parallel Execution
        run: |
          end_time=$(date +%s)
          start_time=${{ steps.start-timer.outputs.start_time }}
          duration=$((end_time - start_time))
          
          # Should complete in roughly 1-2 seconds since running in parallel
          if [ $duration -gt 3 ]; then
            echo "Execution took too long ($duration seconds), expected parallel execution"
            exit 1
          fi

      - name: Start Timer
        id: start-timer-sequential
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Test Sequential Execution
        id: sequential-test
        uses: ./
        with:
          matrix: |
            - number: [1, 2, 3, 4, 5]
          max-parallel: 1
          steps: |
            - name: Sleep Step
              id: sleep
              run: sleep 1

      - name: Validate Sequential Execution
        run: |
          end_time=$(date +%s)
          start_time=${{ steps.start-timer-sequential.outputs.start_time }}
          duration=$((end_time - start_time))
          
          # Should take at least 5 seconds since running sequentially
          if [ $duration -lt 4 ]; then
            echo "Execution too fast ($duration seconds), expected sequential execution"
            exit 1
          fi

      - name: Test Matrix Include
        id: include-test
        uses: ./
        with:
          matrix: |
            - fruit: [apple, pear]
              animal: [cat, dog]
              include:
                - color: green
                - color: pink
                  animal: cat
                - fruit: apple
                  shape: circle
                - fruit: banana
                - fruit: banana
                  animal: cat
          steps: |
            - name: Echo Values
              id: echo
              run: |
                echo "combo=$MATRIX_FRUIT-$MATRIX_ANIMAL${MATRIX_COLOR:+-$MATRIX_COLOR}${MATRIX_SHAPE:+-$MATRIX_SHAPE}" >> $STEPS_OUTPUTS
          outputs: |
            - combo: ${ STEPS_ECHO_COMBO }

      - name: Validate Include Output
        run: |
          # Sort both JSONs by all fields to ensure consistent ordering
          output_sorted=$(echo '${{ steps.include-test.outputs.json }}' | jq -S 'sort_by(.fruit, .animal, .color, .shape, .combo)')
          expected_sorted=$(echo '[
            {"fruit":"apple","animal":"cat","color":"pink","shape":"circle","combo":"apple-cat-pink-circle"},
            {"fruit":"apple","animal":"dog","color":"green","shape":"circle","combo":"apple-dog-green-circle"},
            {"fruit":"pear","animal":"cat","color":"pink","combo":"pear-cat-pink"},
            {"fruit":"pear","animal":"dog","color":"green","combo":"pear-dog-green"},
            {"fruit":"banana","combo":"banana"},
            {"fruit":"banana","animal":"cat","combo":"banana-cat"}
          ]' | jq -S 'sort_by(.fruit, .animal, .color, .shape, .combo)')
          
          # Compare the sorted JSONs
          if [ "$output_sorted" != "$expected_sorted" ]; then
            echo "JSON comparison failed. Showing both versions:"
            echo "Expected (sorted):"
            echo "$expected_sorted" | jq .
            echo "Got (sorted):"
            echo "$output_sorted" | jq .
            echo "Showing diff:"
            diff -u <(echo "$expected_sorted" | jq .) <(echo "$output_sorted" | jq .) || true
            exit 1
          fi

      - name: Test Include-Only Matrix
        id: include-only-test
        uses: ./
        with:
          matrix: |
            - include:
                - color: green
                - color: pink
                  animal: cat
                - fruit: apple
                  shape: circle
                - fruit: banana
                - fruit: banana
                  animal: cat
          steps: |
            - name: Echo Values
              id: echo
              run: |
                values=()
                [ -n "$MATRIX_COLOR" ] && values+=("$MATRIX_COLOR")
                [ -n "$MATRIX_ANIMAL" ] && values+=("$MATRIX_ANIMAL")
                [ -n "$MATRIX_FRUIT" ] && values+=("$MATRIX_FRUIT")
                [ -n "$MATRIX_SHAPE" ] && values+=("$MATRIX_SHAPE")
                echo "combo=$(IFS=-; echo "${values[*]}")" >> $STEPS_OUTPUTS
          outputs: |
            - combo: ${ STEPS_ECHO_COMBO }

      - name: Validate Include-Only Output
        run: |
          # Sort both JSONs by all fields to ensure consistent ordering
          output_sorted=$(echo '${{ steps.include-only-test.outputs.json }}' | jq -S 'sort_by(.color, .animal, .fruit, .shape, .combo)')
          expected_sorted=$(echo '[
            {"color":"green","combo":"green"},
            {"color":"pink","animal":"cat","combo":"pink-cat"},
            {"fruit":"apple","shape":"circle","combo":"apple-circle"},
            {"fruit":"banana","combo":"banana"},
            {"fruit":"banana","animal":"cat","combo":"banana-cat"}
          ]' | jq -S 'sort_by(.color, .animal, .fruit, .shape, .combo)')
          
          # Compare the sorted JSONs
          if [ "$output_sorted" != "$expected_sorted" ]; then
            echo "JSON comparison failed. Showing both versions:"
            echo "Expected (sorted):"
            echo "$expected_sorted" | jq .
            echo "Got (sorted):"
            echo "$output_sorted" | jq .
            echo "Showing diff:"
            diff -u <(echo "$expected_sorted" | jq .) <(echo "$output_sorted" | jq .) || true
            exit 1
          fi

      - name: Test Include From JSON
        id: json-include-test
        uses: ./
        with:
          matrix: |
            - include: ${{ steps.include-only-test.outputs.json }}
          steps: |
            - name: Echo Values
              id: echo
              run: |
                values=()
                [ -n "$MATRIX_COLOR" ] && values+=("$MATRIX_COLOR")
                [ -n "$MATRIX_ANIMAL" ] && values+=("$MATRIX_ANIMAL")
                [ -n "$MATRIX_FRUIT" ] && values+=("$MATRIX_FRUIT")
                [ -n "$MATRIX_SHAPE" ] && values+=("$MATRIX_SHAPE")
                echo "combo=$(IFS=-; echo "${values[*]}")" >> $STEPS_OUTPUTS
          outputs: |
            - combo: ${ STEPS_ECHO_COMBO }

      - name: Validate JSON Include Output
        run: |
          # Sort both JSONs by all fields to ensure consistent ordering
          output_sorted=$(echo '${{ steps.json-include-test.outputs.json }}' | jq -S 'sort_by(.color, .animal, .fruit, .shape, .combo)')
          expected_sorted=$(echo '[
            {"color":"green","combo":"green"},
            {"color":"pink","animal":"cat","combo":"pink-cat"},
            {"fruit":"apple","shape":"circle","combo":"apple-circle"},
            {"fruit":"banana","combo":"banana"},
            {"fruit":"banana","animal":"cat","combo":"banana-cat"}
          ]' | jq -S 'sort_by(.color, .animal, .fruit, .shape, .combo)')
          
          # Compare the sorted JSONs
          if [ "$output_sorted" != "$expected_sorted" ]; then
            echo "JSON comparison failed. Showing both versions:"
            echo "Expected (sorted):"
            echo "$expected_sorted" | jq .
            echo "Got (sorted):"
            echo "$output_sorted" | jq .
            echo "Showing diff:"
            diff -u <(echo "$expected_sorted" | jq .) <(echo "$output_sorted" | jq .) || true
            exit 1
          fi 